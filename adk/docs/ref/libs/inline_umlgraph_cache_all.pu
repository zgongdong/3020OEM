@startuml inline_umlgraph_1.png
    note "For clarity not all state transitions shown" as N1

    [*] -down-> UNINITIALISED : Start

    UNINITIALISED : App module and library init
    UNINITIALISED --> FINDING_HANDLES : GattRoleSelectionClientInit()
    UNINITIALISED --> ERROR : Failed to register with Gatt Manager

    FINDING_HANDLES : Discovering characteristics of the remote server so that handles are known for commands
    FINDING_HANDLES --> INITIALISED : Characteristic discovery completed 

    INITIALISED : Handles known, awaiting command
    INITIALISED --> WAITING_READ : 
    INITIALISED --> FINDING_NOTIFICATION_HANDLE : 
    INITIALISED --> SETTING_NOTIFICATION : 

    FINDING_NOTIFICATION_HANDLE : Asked to enable notifications, but no handle yet
    FINDING_NOTIFICATION_HANDLE --> SETTING_NOTIFICATION : Setting notification state on server

    SETTING_NOTIFICATION : Waiting for acknowledgment that notificatiin setting updated at the server
    SETTING_NOTIFICATION --> INITIALISED : Characteristic configuration write successful

    WAITING_READ : Awaiting response for a characteristic read
    WAITING_READ --> INITIALISED : response received

    WAITING_WRITE : Awaiting response for a characteristic write
    WAITING_WRITE --> INITIALISED : response received
@enduml
@startuml inline_umlgraph_2.png
    note "For clarity not all state transitions shown" as N1

    [*] -down-> UNINITIALISED : Start

    UNINITIALISED : App module and library init
    UNINITIALISED --> FINDING_HANDLES : GattRoleSelectionClientInit()
    UNINITIALISED --> ERROR : Failed to register with Gatt Manager

    FINDING_HANDLES : Discovering characteristics of the remote server so that handles are known for commands
    FINDING_HANDLES --> INITIALISED : Characteristic discovery completed 

    INITIALISED : Handles known, awaiting command
    INITIALISED --> WAITING_READ : 
    INITIALISED --> FINDING_NOTIFICATION_HANDLE : 
    INITIALISED --> SETTING_NOTIFICATION : 

    FINDING_NOTIFICATION_HANDLE : Asked to enable notifications, but no handle yet
    FINDING_NOTIFICATION_HANDLE --> SETTING_NOTIFICATION : Setting notification state on server

    SETTING_NOTIFICATION : Waiting for acknowledgment that notificatiin setting updated at the server
    SETTING_NOTIFICATION --> INITIALISED : Characteristic configuration write successful

    WAITING_READ : Awaiting response for a characteristic read
    WAITING_READ --> INITIALISED : response received

    WAITING_WRITE : Awaiting response for a characteristic write
    WAITING_WRITE --> INITIALISED : response received
@enduml
@startuml inline_umlgraph_3.png
    note "For clarity not all state transitions shown" as N1

    [*] -down-> UNINITIALISED : Start

    UNINITIALISED : App module and library init
    UNINITIALISED --> FINDING_HANDLES : GattRootKeyClientInit()
    UNINITIALISED --> ERROR : Failed to register with Gatt Manager

    DISABLED : Client service is disabled. This can occur once devices are paired and the client is not needed.

    FINDING_HANDLES : Discovering characteristics of the remote server so that handles are known for commands
    FINDING_HANDLES --> FINDING_INDICATION_HANDLE : Characteristic discovery completed 

    FINDING_INDICATION_HANDLE : Having found the handle for challenge control, finding the descriptor so that indications can be enabled
    FINDING_INDICATION_HANDLE --> ENABLING_INDICATIONS : Descriptor search complete, auto-enable indications

    ENABLING_INDICATIONS : Waiting for acknowledgment that indications have been enabled at the server
    ENABLING_INDICATIONS --> INITIALISED : Characteristic configuration write successful

    INITIALISED : Handles known, awaiting command
    INITIALISED --> STARTING_CHALLENGE : GattRootKeyClientChallengePeer()

    STARTING_CHALLENGE : First stage of challenge sent to the server
    STARTING_CHALLENGE --> FINISHING_CHALLENGE : Received random from server, written hash
    STARTING_CHALLENGE --> ERROR : Incorrect message / opcode received

    FINISHING_CHALLENGE : Final stage of challenge sent to the server
    FINISHING_CHALLENGE --> AUTHENTICATED :Hash received from server and verified
    FINISHING_CHALLENGE --> ERROR : Incorrect HASH received

    AUTHENTICATED : Challenge has been completed successfully
    AUTHENTICATED --> WRITING_IR : GattRootKeyClientWriteKey()

    WRITING_IR : IR key has been sent to server
    WRITING_IR --> WRITING_ER : IR write successful

    WRITING_ER : ER key has been sent to server
    WRITING_ER --> COMMITTING : Write of ER confirmed, requested write of keys

    COMMITTING : Keys have been sent, asking server to apply changes
    COMMITTING --> EXCHANGED: Acknowledgment that keys applied

    EXCHANGED : Keys have been confirmed

    ERROR : Interaction with the server has failed
    ERROR --> DISABLED: Only allowed transition from error
@enduml
@startuml inline_umlgraph_4.png
    note "For clarity not all state transitions shown" as N1

    [*] -down-> UNINITIALISED : Start

    UNINITIALISED : App module and library init
    UNINITIALISED --> FINDING_HANDLES : GattRootKeyClientInit()
    UNINITIALISED --> ERROR : Failed to register with Gatt Manager

    DISABLED : Client service is disabled. This can occur once devices are paired and the client is not needed.

    FINDING_HANDLES : Discovering characteristics of the remote server so that handles are known for commands
    FINDING_HANDLES --> FINDING_INDICATION_HANDLE : Characteristic discovery completed 

    FINDING_INDICATION_HANDLE : Having found the handle for challenge control, finding the descriptor so that indications can be enabled
    FINDING_INDICATION_HANDLE --> ENABLING_INDICATIONS : Descriptor search complete, auto-enable indications

    ENABLING_INDICATIONS : Waiting for acknowledgment that indications have been enabled at the server
    ENABLING_INDICATIONS --> INITIALISED : Characteristic configuration write successful

    INITIALISED : Handles known, awaiting command
    INITIALISED --> STARTING_CHALLENGE : GattRootKeyClientChallengePeer()

    STARTING_CHALLENGE : First stage of challenge sent to the server
    STARTING_CHALLENGE --> FINISHING_CHALLENGE : Received random from server, written hash
    STARTING_CHALLENGE --> ERROR : Incorrect message / opcode received

    FINISHING_CHALLENGE : Final stage of challenge sent to the server
    FINISHING_CHALLENGE --> AUTHENTICATED :Hash received from server and verified
    FINISHING_CHALLENGE --> ERROR : Incorrect HASH received

    AUTHENTICATED : Challenge has been completed successfully
    AUTHENTICATED --> WRITING_IR : GattRootKeyClientWriteKey()

    WRITING_IR : IR key has been sent to server
    WRITING_IR --> WRITING_ER : IR write successful

    WRITING_ER : ER key has been sent to server
    WRITING_ER --> COMMITTING : Write of ER confirmed, requested write of keys

    COMMITTING : Keys have been sent, asking server to apply changes
    COMMITTING --> EXCHANGED: Acknowledgment that keys applied

    EXCHANGED : Keys have been confirmed

    ERROR : Interaction with the server has failed
    ERROR --> DISABLED: Only allowed transition from error
@enduml
@startuml inline_umlgraph_5.png
    note "For clarity not all state transitions shown" as N1

    [*] -down-> UNINITIALISED : Start

    UNINITIALISED : App module and library init
    UNINITIALISED --> IDLE : GattRootKeyServerInit()
    UNINITIALISED --> ERROR : Failed to register with Gatt Manager

    DISABLED : Server is disabled. This can occur once devices are paired and the client is not needed.

    IDLE : Initialised, but not yet configured for action !
    IDLE --> INITIALISED : GattRootKeyServerReadyForChallenge()

    INITIALISED : Handles known, awaiting command
    INITIALISED --> RESPONDED_RANDOM : Random received from client

    RESPONDED_RANDOM : First stage of challenge sent to the client, awaiting send confirm
    RESPONDED_RANDOM --> AWAITING_HASH : Send of random indication confirmed
    RESPONDED_RANDOM --> ERROR : Incorrect message / opcode received

    AWAITING_HASH : Awaiting hash request
    AWAITING_HASH --> RESPONDED_HASH : Hash received from client
    AWAITING_HASH --> ERROR : Incorrect message / opcode received

    RESPONDED_HASH : Final stage of challenge sent to the client, awaiting send confirm
    RESPONDED_HASH --> AUTHENTICATED :Send of hash indication confirmed
    RESPONDED_HASH --> ERROR : Incorrect HASH received

    AUTHENTICATED : Challenge has been completed successfully
    AUTHENTICATED --> IR_RECEIVED : IR key received

    IR_RECEIVED : IR key has been received from client
    IR_RECEIVED --> ER_RECEIVED : ER key received

    ER_RECEIVED : ER key has been received 
    ER_RECEIVED --> KEYS_EXCHANGED : Command to commit has been receoved

    KEYS_EXCHANGED : Keys have been confirmed

    ERROR : Interaction with the client has failed
    ERROR --> DISABLED: Only allowed transition from error
@enduml
@startuml inline_umlgraph_6.png
    note "For clarity not all state transitions shown" as N1

    [*] -down-> UNINITIALISED : Start

    UNINITIALISED : App module and library init
    UNINITIALISED --> IDLE : GattRootKeyServerInit()
    UNINITIALISED --> ERROR : Failed to register with Gatt Manager

    DISABLED : Server is disabled. This can occur once devices are paired and the client is not needed.

    IDLE : Initialised, but not yet configured for action !
    IDLE --> INITIALISED : GattRootKeyServerReadyForChallenge()

    INITIALISED : Handles known, awaiting command
    INITIALISED --> RESPONDED_RANDOM : Random received from client

    RESPONDED_RANDOM : First stage of challenge sent to the client, awaiting send confirm
    RESPONDED_RANDOM --> AWAITING_HASH : Send of random indication confirmed
    RESPONDED_RANDOM --> ERROR : Incorrect message / opcode received

    AWAITING_HASH : Awaiting hash request
    AWAITING_HASH --> RESPONDED_HASH : Hash received from client
    AWAITING_HASH --> ERROR : Incorrect message / opcode received

    RESPONDED_HASH : Final stage of challenge sent to the client, awaiting send confirm
    RESPONDED_HASH --> AUTHENTICATED :Send of hash indication confirmed
    RESPONDED_HASH --> ERROR : Incorrect HASH received

    AUTHENTICATED : Challenge has been completed successfully
    AUTHENTICATED --> IR_RECEIVED : IR key received

    IR_RECEIVED : IR key has been received from client
    IR_RECEIVED --> ER_RECEIVED : ER key received

    ER_RECEIVED : ER key has been received 
    ER_RECEIVED --> KEYS_EXCHANGED : Command to commit has been receoved

    KEYS_EXCHANGED : Keys have been confirmed

    ERROR : Interaction with the client has failed
    ERROR --> DISABLED: Only allowed transition from error
@enduml
